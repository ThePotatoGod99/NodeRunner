package hola;

import java.util.ArrayList;
import main.java.ca.umontreal.iro.hackathon.loderunner.*;

public class Cheminement {
	private WorldObject objetDepart;
	private WorldObject objetArrive;
	private World world;
	private ArrayList<Direction> checkpoint = new ArrayList<Direction>();
	private ArrayList<Direction> cheminFinal = new ArrayList<Direction>();
	private SVector3d avance = new SVector3d(1, 0, 0);
	private SVector3d monter = new SVector3d(0, 1, 0);

	public Cheminement(World world, WorldObject objetDepart, WorldObject objetArrive) {
		this.world = world;
		this.objetDepart = objetDepart;
		this.objetArrive = objetArrive;
	}

	public ArrayList<Direction> chemin(SVector3d depart, SVector3d arrive, Direction deplacement) {
		SVector3d prochainPos = new SVector3d (depart.getX(),depart.getY(),0);
		if (world.isInBounds(prochainPos.add(avance))) {
			if (world.get(depart.add(avance)).equals(objetArrive)) {
				checkpoint.add(deplacement);
				cheminFinal.addAll(checkpoint);
				return cheminFinal;
			} else if (world.spaceIsAvailable(prochainPos)) {
				depart.add(avance);
				cheminFinal.add(deplacement);
				chemin(depart, arrive, Direction.RIGHT);
			} else {
				cheminFinal.clear();
				avance = avance.multiply(-1);
				chemin(objetDepart.getPosition(), objetArrive.getPosition(), Direction.LEFT);
			}
			
		}
		return cheminFinal;
	}

}
