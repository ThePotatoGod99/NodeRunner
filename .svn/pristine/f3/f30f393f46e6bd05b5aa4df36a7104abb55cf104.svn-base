package hola;

import main.java.ca.umontreal.iro.hackathon.loderunner.Direction;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

public class Simulation {

    private World world;
    private WorldObject destination;


    private int[] directionChoices = {2, 3, 4, 1};
    private int i = 0;


    private int Maxshit = 0;


    private ArrayList<Direction> directionsList = new ArrayList<>();

    public Simulation(World world, WorldObject destination) {
        this.world = (World) world.clone();
        this.destination = destination;
    }

    public ArrayList<Direction> simulate() {

        int direction = directionChoices[0];
//        nextStep(direction);

        ArrayList<Direction> directions1 = new XdSimulation(world, Direction.LEFT, 0).simulate();
        ArrayList<Direction> directions2 = new XdSimulation(world, Direction.RIGHT,0 ).simulate();
        ArrayList<Direction> directions3 = new XdSimulation(world, Direction.UP, 0).simulate();
        ArrayList<Direction> directions4 = new XdSimulation(world, Direction.DOWN, 0).simulate();
        int[] sizes = new int[4];
        if (directions1 != null) {
            int l1 = directions1.size();
            sizes[0] = l1;
        }
        if (directions2 != null) {
            int l2 = directions2.size();
            sizes[1] = l2;
        }

        if (directions3 != null) {
            int l3 = directions3.size();
            sizes[2] = l3;
        }
        if (directions4 != null) {
            int l4 = directions4.size();
            sizes[3] = l4;
        }

        int min = getMin(sizes);

        if (min == 0) {
            return directions1;
        }
        if (min == 1) {
            return directions2;
        }
        if (min == 2) {
            return directions3;
        }
        if (min == 3) {
            return directions4;
        }

        System.out.println("ASDFADSFAFDGSDFGSD");
        return null;

    }


    public static int getMin(int[] inputArray) {
        int minValue = inputArray[0];
        int minIndex = 0;
        for (int i = 1; i < inputArray.length; i++) {
            if (inputArray[i] < minValue) {
                minValue = inputArray[i];
                minIndex = i;
            }
        }
        return minIndex;
    }


//    public boolean nextStep(int direction) {
////        Direction dir = Direction.fromInt(direction);
////        return nextStep(dir);
////
////    }
////
////    public boolean nextStep(Direction direction) {
//
//    }


    public class XdSimulation {
        private World world;
        private Direction direction;
        private ArrayList<Direction> directionsList = new ArrayList<>();


        int maxShit;

        public XdSimulation(World world, Direction direction, int maxShit) {
            this.world = (World) world.clone();
            this.direction = direction;
            this.maxShit = maxShit;
        }

        public ArrayList<Direction> simulate() {


            boolean xd = world.move(direction);
            System.out.println(direction + " + " + xd);
            if (xd) {

                directionsList.add(direction);
                if (world.getRunnerObject().getPosition().equals(destination.getPosition())) {
                    return directionsList;
                }

                boolean continuer = true;

                ArrayList<Direction> result = new ArrayList<>();
                ArrayList<Direction> directions1 = new XdSimulation(world, Direction.LEFT, maxShit).simulate();
                ArrayList<Direction> directions2 = new XdSimulation(world, Direction.RIGHT, maxShit).simulate();
                ArrayList<Direction> directions3 = new XdSimulation(world, Direction.UP, maxShit).simulate();
                ArrayList<Direction> directions4 = new XdSimulation(world, Direction.DOWN, maxShit).simulate();

                ArrayList<ArrayList<Direction>> dir = new ArrayList<>();
                ArrayList<Float> sizes = new ArrayList<Float>();




                    if (directions1 != null) {
                        dir.add(directions1);
                        sizes.add((float) directions1.size());
                    }
                    if (directions2 != null) {
                        dir.add(directions2);
                        sizes.add((float) directions2.size());
                    }
                    if (directions3 != null) {
                        dir.add(directions3);
                        sizes.add((float) directions3.size());
                    }
                    if (directions4 != null) {
                        dir.add(directions4);
                        sizes.add((float) directions4.size());
                    }


                directionsList.addAll(result);
                return directionsList;

            } else {
                return null;
            }
        }
    }


}
